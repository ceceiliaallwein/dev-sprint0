# Text answers from Week 0

# Name: 



Explain what each of the following lines does. Use the terminology you learned from the book (or Google)
	
	from TurtleWorld import *
	world = TurtleWorld()
	bob = Turtle()
	wait_for_user()

Answer: 

	LINE 9 imports the classes (+ data, functions) from TurtleWorld 
	
	LINE 10 creates a new instance of the TurtleWorld() class and assigns it to the variable 'world'
	
	LINE 11 creates a new instance of the Turtle() class and assigns it to the variable 'bob'
	
	LINE 12 calls a function from the World class within the current environment (which inherets from the GUI class) that halts python (with the MainLoop() in Tk) until there's further interaction, i.e. input of text from any action from any device... all code is essentially text. 


These questions pertain to the program you wrote in Week0.

-- What are the arguments of polygon()?  What type is each argument?
Answer:

	t = Turtle, str
	n = number of sides, int
	l = length of each side, int

-- What two turtle functions did you use to draw the sides of the polygon?
Answer:

	fd()
	rt()

-- What are the arguments for polyline?  What type is each argument?
Answer:

	I called this function line_subtend, and the three arguements are: 
	> 	no_sides: str
	>	seg_length: int
	>	angle: int


Suppose you wrote a function, center_circle(), that draws a circle of a given radius around the current location of the turtle and restores the turtle to its starting point.

-- What turtle functions would you use to move the turtle from the center to the edge of the circle and get ready to call the original circle() function?
Answer:

	line_subtend(bob, 1, radius, 90)
	''' This would pass bob (the variable assigned to the turtle) exactly one
	line segment of the length radius. Then the turtle (bob) would pivot nintey
	degrees to the right--newly positioned to begin the circle function'''

-- Suppose the interface of this function requires the turtle to end up in the same place it started, facing in the same direction it started.
Answer:

	# asignments
	radius = 50 
	angle = 90
	no_sides = 1

	# function calls
	move_turtle (bob, no_sides, radius, angle)		#moves turtle w/o drawing 
	circle(bob, radius)								#draws the circle
	pu(bob)											#prepares move w/o drawing
	rt(bob, angle)
	fd(bob, radius)
	rt(bob, angle)
	rt(bob, angle)



-- What is this type of requirement called?
Answer:

Precondition


